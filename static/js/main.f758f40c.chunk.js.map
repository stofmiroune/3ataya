{"version":3,"sources":["card.js","cardlist.js","robots.js","SearchBox.js","Scroll.js","app.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","react_default","a","createElement","className","alt","src","concat","Cardlist","robots","component","map","user","i","card","key","id","username","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","filter","toLowerCase","includes","length","src_SearchBox","src_Scroll","cardlist","Component","Boolean","window","location","hostname","match","ReactDOM","render","app","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAaeA,EAXF,SAAAC,GAAiB,IAAdC,EAAcD,EAAdC,KAAKC,EAASF,EAATE,MACnB,OACGC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDAClBH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BR,EAA1B,eACrBE,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,cAAMJ,EAAN,KACAE,EAAAC,EAAAC,cAAA,aAAKH,MCIOQ,EATE,SAAAV,GAAc,IAAZW,EAAYX,EAAZW,OACXC,EAAWD,EAAOE,IAAI,SAACC,EAAKC,GAChC,OAAQZ,EAAAC,EAAAC,cAACW,EAAD,CAAMC,IAAKN,EAAOI,GAAGG,GAAIA,GAAIP,EAAOI,GAAGG,GAAIjB,KAAMU,EAAOI,GAAGd,KAAMC,MAAOS,EAAOI,GAAGb,UAE5F,OACEC,EAAAC,EAAAC,cAAA,eAAOO,EAAP,MCRSD,EAAS,CACpB,CACEO,GAAI,EACJjB,KAAM,uBACNkB,SAAU,OACVjB,MAAO,yBAET,CACEgB,GAAI,EACJjB,KAAM,sBACNkB,SAAU,YACVjB,MAAO,sBAET,CACEgB,GAAI,EACJjB,KAAM,kBACNkB,SAAU,WACVjB,MAAO,uBAET,CACEgB,GAAI,EACJjB,KAAM,kBACNkB,SAAU,WACVjB,MAAO,uBAET,CACEgB,GAAI,EACJjB,KAAM,eACNkB,SAAU,SACVjB,MAAO,oBAET,CACEgB,GAAI,EACJjB,KAAM,oBACNkB,SAAU,mBACVjB,MAAO,0BAET,CACEgB,GAAI,EACJjB,KAAM,eACNkB,SAAU,eACVjB,MAAO,sBC3BIkB,EAbE,SAAApB,GAAiCA,EAA/BqB,YAA+B,IAAjBC,EAAiBtB,EAAjBsB,aACjC,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAEjBH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,uCACjBiB,KAAK,SACLC,YAAY,SACZC,SAAUH,IALR,MCOaI,EARD,SAACC,GACb,OACFxB,EAAAC,EAAAC,cAAA,OAAKuB,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,UAC9DJ,EAAMK,WCmCQC,cAlCf,SAAAA,IACA,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAAGC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAMHI,eAAe,SAACC,GACdR,EAAKS,SAAS,CAAEtB,YAAYqB,EAAME,OAAOC,SANzCX,EAAKY,MACL,CAACnC,OAAO,GACLU,YAAY,IAHjBa,mFAYEG,KAAKM,SAAS,CAAChC,OAAOA,qCAEf,IAAAoC,EAAAV,KACDW,EAAOX,KAAKS,MAAMnC,OAAOqC,OAAO,SAAArC,GACxC,OAAOA,EAAOV,KAAKgD,cAAcC,SAASH,EAAKD,MAAMzB,YAAY4B,iBAEhE,OAAKtC,EAAOwC,OAEThD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACnBH,EAAAC,EAAAC,cAAA,6BAEGF,EAAAC,EAAAC,cAAC+C,EAAD,CAAW9C,UAAU,KACrBgB,aAAce,KAAKI,iBACtBtC,EAAAC,EAAAC,cAACgD,EAAD,KACKlD,EAAAC,EAAAC,cAACiD,EAAD,CAAU3C,OAAQqC,MARM7C,EAAAC,EAAAC,cAAA,+BApBXkD,mBCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAAQC,SAASC,eAAe,SDyH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f758f40c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name,email})=>{\n  return(\n     <div className='bg-dark-blue dib br3 pa3 ma2 grow bw2 shadow-5'>\n  <img alt='robots' src={`https://robohash.org/${name}?2 00x200`} />\n  <div>\n   <h2> {name} </h2>\n   <p> {email}</p>\n</div>\n</div>\n);\n}\nexport default Card;\n","import React from 'react';\nimport Card from './card';\n\nconst Cardlist = ({robots}) => {\n  const component= robots.map((user,i) => {\n    return  <Card key={robots[i].id} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\n  })\n  return (\n    <div> {component} </div>\n  );\n\n}\nexport default Cardlist;\n","export const robots = [\n  {\n    id: 1,\n    name: 'El Miroun El Mostafa',\n    username: 'Bret',\n    email: 'Stofmiroune@Gmail.com'\n  },\n  {\n    id: 2,\n    name: 'Felouach Abdessamad',\n    username: 'Antonette',\n    email: 'Samadfel@Gmail.com'\n  },\n  {\n    id: 3,\n    name: 'Hamza El Azhari',\n    username: 'Samantha',\n    email: 'hmzazhari@Gmail.com'\n  },\n  {\n    id: 4,\n    name: 'Badouj Abdeslam',\n    username: 'Karianne',\n    email: 'BAdoujabd@Gmail.com'\n  },\n  {\n    id: 5,\n    name: 'Ahmed MHamdi',\n    username: 'Kamren',\n    email: 'AMhadi@Gmail.com'\n  },\n  {\n    id: 6,\n    name: 'Tahrouch Abdellah',\n    username: 'Leopoldo_Corkery',\n    email: 'AbdoTahrouch@Gmail.com'\n  },\n  {\n    id: 7,\n    name: 'Reda Boujida',\n    username: 'Elwyn.Skiles',\n    email: 'Boujida@Gmail.com'\n  }\n]\n","import React from 'react';\nconst SearchBox= ({searchfield , searchChange}) =>{\nreturn(\n  <div className='pa5'>\n\n<input className='pa3 tc ba b--green bg-lightest-blue '\ntype=\"search\"\nplaceholder='Search'\nonChange={searchChange}\n/> </div>\n\n)\n\n}\nexport default SearchBox\n","import React from 'react';\n\nconst Scroll =(props)=> {\n  return(\n<div style={{overflow:'scroll',border:'1px solid black',height:'800px' }}>\n{props.children}\n</div>\n\n);\n};\nexport default Scroll;\n","import React, { Component } from 'react';\nimport Cardlist from './cardlist';\nimport {robots} from './robots';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nclass App extends Component {\nconstructor()\n{  super()\n  this.state=\n  {robots:[],\n     searchfield:''\n   }\n }\nonSearchChange=(event) => {\n  this.setState({ searchfield:event.target.value})\n\n}\n\ncomponentDidMount(){\n  this.setState({robots:robots});\n}\nrender() {\n  const filter=this.state.robots.filter(robots=> {\nreturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n })\n if (!robots.length){ return <h1>Loading...</h1> }else{\n  return(\n    <div className='tc'>\n<h1 > 3ataya Family </h1>\n\n   <SearchBox className='tc'\n   searchChange={this.onSearchChange}/>\n<Scroll>\n     <Cardlist robots={filter} />\n     </Scroll>\n</div>\n);\n}\n}\n}\nexport default App ;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './app';\nimport './App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}